# -*- coding: utf-8 -*-
"""test1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gcKXm5nY_Ox0zPBEHJi488shO40SeXIY
"""

!pip install openai
!pip install git+https://github.com/pytube/pytube
!pip install git+https://github.com/openai/whisper.git
!pip install pandas
!pip install requests
!pip install deep-translator
!pip install moviepy
import os
import pandas as pd
import openai
from google.colab import files
from pytube import YouTube
from deep_translator import GoogleTranslator
from moviepy.editor import AudioFileClip
import whisper
import re
from pytube import cipher

# Patch pytube cipher
def get_throttling_plan(js):
    pattern = re.compile(r'\b[a-zA-Z0-9$]{1,3}(?:\s*\.\s*|\s*=\s*|\[\s*")([a-zA-Z0-9$]{1,3})')
    transform_plan = pattern.findall(js)
    return transform_plan

cipher.get_throttling_plan = get_throttling_plan

# 获取所有语言代码
def get_language_codes():
    language_codes = {
        "af": "Afrikaans", "sq": "Albanian", "am": "Amharic", "ar": "Arabic", "hy": "Armenian",
        "az": "Azerbaijani", "eu": "Basque", "be": "Belarusian", "bn": "Bengali", "bs": "Bosnian",
        "bg": "Bulgarian", "ca": "Catalan", "ceb": "Cebuano", "ny": "Chichewa", "zh-cn": "Chinese (Simplified)",
        "zh-tw": "Chinese (Traditional)", "co": "Corsican", "hr": "Croatian", "cs": "Czech", "da": "Danish",
        "nl": "Dutch", "en": "English", "eo": "Esperanto", "et": "Estonian", "tl": "Filipino",
        "fi": "Finnish", "fr": "French", "fy": "Frisian", "gl": "Galician", "ka": "Georgian",
        "de": "German", "el": "Greek", "gu": "Gujarati", "ht": "Haitian Creole", "ha": "Hausa",
        "haw": "Hawaiian", "iw": "Hebrew", "hi": "Hindi", "hmn": "Hmong", "hu": "Hungarian",
        "is": "Icelandic", "ig": "Igbo", "id": "Indonesian", "ga": "Irish", "it": "Italian",
        "ja": "Japanese", "jw": "Javanese", "kn": "Kannada", "kk": "Kazakh", "km": "Khmer",
        "ko": "Korean", "ku": "Kurdish (Kurmanji)", "ky": "Kyrgyz", "lo": "Lao", "la": "Latin",
        "lv": "Latvian", "lt": "Lithuanian", "lb": "Luxembourgish", "mk": "Macedonian", "mg": "Malagasy",
        "ms": "Malay", "ml": "Malayalam", "mt": "Maltese", "mi": "Maori", "mr": "Marathi",
        "mn": "Mongolian", "my": "Myanmar (Burmese)", "ne": "Nepali", "no": "Norwegian", "ps": "Pashto",
        "fa": "Persian", "pl": "Polish", "pt": "Portuguese", "pa": "Punjabi", "ro": "Romanian",
        "ru": "Russian", "sm": "Samoan", "gd": "Scots Gaelic", "sr": "Serbian", "st": "Sesotho",
        "sn": "Shona", "sd": "Sindhi", "si": "Sinhala", "sk": "Slovak", "sl": "Slovenian",
        "so": "Somali", "es": "Spanish", "su": "Sundanese", "sw": "Swahili", "sv": "Swedish",
        "tg": "Tajik", "ta": "Tamil", "te": "Telugu", "th": "Thai", "tr": "Turkish",
        "uk": "Ukrainian", "ur": "Urdu", "uz": "Uzbek", "vi": "Vietnamese", "cy": "Welsh",
        "xh": "Xhosa", "yi": "Yiddish", "yo": "Yoruba", "zu": "Zulu"
    }
    return language_codes

# 将 MP4 转换为 WAV
def convert_mp4_to_wav(mp4_file, wav_file):
    audio_clip = AudioFileClip(mp4_file)
    audio_clip.write_audiofile(wav_file)
    audio_clip.close()

# 提取音频中的文字（使用 Whisper）
def extract_text_from_audio(audio_file, model_name='base'):
    model = whisper.load_model(model_name)
    result = model.transcribe(audio_file)
    return result['text']

# 使用 deep-translator 进行即时翻译
def translate_text(text, target_language, max_length=150):
    translator = GoogleTranslator(target=target_language)
    translated_text = ""
    start = 0
    while start < len(text):
        end = start + max_length
        translated_text += translator.translate(text[start:end])
        start = end
    return translated_text

# 对翻译后的文字进行摘要（使用 OpenAI GPT）
def summarize_text_with_gpt(transcribed_text):
    api_url = "https://api.openai.com/v1/chat/completions"
    openai.api_key = 'Your Openai API KEY'
    headers = {"Authorization": f"Bearer {openai.api_key}"}
    client = openai.OpenAI(api_key=openai.api_key)
    response = client.chat.completions.create(
      model="gpt-3.5-turbo-0125",
      messages=[
        {"role": "system", "content": "You are a helpful assistant"},
        {"role": "user", "content": f"Provide a summary of the following in Markdown format using bullet points:\n\n{transcribed_text}"}
      ]
    )
    summary = response.choices[0].message.content
    return summary

# 下载并转换音频
def download_and_convert_audio(url, filename, wav_file):
    yt = YouTube(url)
    stream = yt.streams.filter(only_audio=True, file_extension='mp4').first()
    stream.download(output_path=".", filename=filename)
    convert_mp4_to_wav(filename, wav_file)

# 主程序
def main():
    # 获取所有语言代码
    language_codes = get_language_codes()

    # 将语言代码表转换为 DataFrame
    df = pd.DataFrame(list(language_codes.items()), columns=['Code', 'Language'])

    # 让用户选择上传文件还是提供 YouTube 的 URL
    choice = input("您想要上传文件还是提供 YouTube 的 URL？（请输入 'upload' 或 'youtube'）：")

    if choice.lower() == 'upload':
        # 上传音频文件
        uploaded = files.upload()

        # 提取音频中的文字（使用 Whisper）
        audio_file = next(iter(uploaded.keys()))
        text = extract_text_from_audio(audio_file)
    elif choice.lower() == 'youtube':
        # 提供 YouTube 的 URL
        url = input("请输入 YouTube 的 URL：")
        filename = "youtube_audio.mp4"
        wav_file = "youtube_audio.wav"

        # 下载和转换音频
        download_and_convert_audio(url, filename, wav_file)

        # 提取音频中的文字（使用 Whisper）
        audio_file = wav_file
        text = extract_text_from_audio(audio_file)
    else:
        print("输入无效选项。")
        return

    # 打印语言代码表
    print("语言代码表:")
    print(df)

    # 让用户选择要翻译成的语言
    target_language = input("请输入目标语言代码（例如 'zh-cn' 代表中文）：")

    # 翻译文字（使用 deep-translator 库）
    translated_text = translate_text(text, target_language=target_language)

    # 显示翻译结果
    print("翻译后的文字：", translated_text)

    # 对翻译后的文字进行摘要（使用 OpenAI GPT）
    summary = summarize_text_with_gpt(translated_text)

    # 显示摘要结果
    print("摘要：", summary)

if __name__ == "__main__":
    main()